name: CI
on:
  pull_request:
    types: ["opened", "reopened", "synchronize", "ready_for_review"]
    branches: ["main"]
    paths-ignore:
      - "config/**"
      - "**.md"

jobs:
  test3:
    runs-on: ubuntu-latest
    steps:
      - name: Hello world
        run: echo "Hello test3!"
  authorize:
    if: ${{ contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    environment: ${{ (github.event_name == 'pull_request' &&
      github.event.pull_request.head.repo.full_name != github.repository) &&
      'external' || 'internal' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.TOKEN }}
    outputs:
      config: ${{ steps.get_config.outputs.config }}
      public_repo: ${{ steps.get_config.outputs.public_repo }}
    steps:
      - name: Get Testing Configuration
        id: get_config
        run: |
          config=$(gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/approvals" --jq '.[0] | .comment')
          if [ -z "$config" ]; then
            exit 0
          fi

          echo "Provided testing configuration:"
          echo "$config"
          if ! echo "$config" | yq e > /dev/null; then
            echo "Invalid testing configuration provided"
            exit 1
          fi
          echo "config=$(echo -n "$config" | base64)" >> $GITHUB_OUTPUT
          if echo "$config" | yq e '... comments=""' | grep -q "hosted"; then
            echo "Hosted cluster deployment was triggered. Using public repository"
            echo "public_repo=true" >> $GITHUB_OUTPUT
          fi
  build:
    concurrency:
      group: build-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    name: Build and Unit Test
    runs-on: ubuntu-latest
    env:
      PUBLIC_REPO: ${{ contains(needs.authorize.result, 'success') && needs.authorize.outputs.public_repo == 'true' }}
    outputs:
      version: ${{ steps.vars.outputs.version }}
      clusterprefix: ${{ steps.vars.outputs.clusterprefix }}
      pr: ${{ steps.pr.outputs.result }}
    permissions:
      packages: write
    steps:
      - name: Set public registry repo env variable
        if: ${{ env.PUBLIC_REPO == 'true' }}
        run: |
          echo "REGISTRY_REPO=oci://ghcr.io/k0rdent/kcm/charts-ci" >> $GITHUB_ENV
      - name: Get PR ref
        uses: actions/github-script@v7
        id: pr
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.payload.pull_request.number,
            });
            return pullRequest
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true # default
      - name: Lint
        run: GOLANGCI_LINT_TIMEOUT=10m make lint
      - name: Verify all generated pieces are up-to-date
        run: make generate-all && git add -N . && git diff --exit-code
      - name: Unit tests
        run: |
          make test
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get outputs
        id: vars
        run: |
          GIT_VERSION=$(git describe --tags --always)
          echo "version=${GIT_VERSION:1}" >> $GITHUB_OUTPUT
          echo "clusterprefix=ci-$(date +%s | cut -b6-10)" >> $GITHUB_OUTPUT
      - name: Build and push KCM controller image to the public repository
        uses: docker/build-push-action@v6
        if: ${{ env.PUBLIC_REPO == 'true' }}
        with:
          build-args: |
            LD_FLAGS=-s -w -X github.com/K0rdent/kcm/internal/build.Version=${{ steps.vars.outputs.version }}
          context: .
          platforms: linux/amd64
          tags: |
            ghcr.io/k0rdent/kcm/controller-ci:${{ steps.vars.outputs.version }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Prepare and push KCM template charts to the public repository
        if: ${{ env.PUBLIC_REPO == 'true' }}
        run: |
          make kcm-chart-release
          make helm-push

  e2e-tests:
    name: E2E Tests
    uses: ./.github/workflows/e2e-test.yml
    needs:
      - authorize # Still need authorize result and config
      - build # Still need build outputs
    secrets: inherit
    # Only run if the 'test e2e' label is present
    if: ${{ contains( github.event.pull_request.labels.*.name, 'test e2e') }}
    with:
      # Pass build outputs
      clusterprefix: ${{ needs.build.outputs.clusterprefix }}
      version: ${{ needs.build.outputs.version }}
      pr: ${{ needs.build.outputs.pr }}
      # Pass authorize outputs (or defaults)
      public_repo: ${{ needs.authorize.outputs.public_repo || 'false' }}
      config: ${{ needs.authorize.outputs.config || '' }}
      # Pass authorize result and labels for matrix generation inside the reusable workflow
      authorize_result: ${{ needs.authorize.result }}
      pull_request_labels: ${{ toJson(github.event.pull_request.labels.*.name) }}
    # Strategy is now handled within the reusable workflow

  cleanup:
    name: Cleanup
    needs:
      - build
      - e2e-tests
      - authorize
    runs-on: ubuntu-latest
    # Run cleanup if build succeeded, authorize succeeded (meaning e2e was requested),
    # and the e2e-tests job didn't fail or get cancelled.
    if: ${{ always() && needs.build.result == 'success' && needs.authorize.result == 'success' && needs.e2e-tests.result != 'failure' && needs.e2e-tests.result != 'cancelled' }}
    timeout-minutes: 15
    outputs:
      clusterprefix: ${{ needs.build.outputs.clusterprefix }}
      version: ${{ needs.build.outputs.version }}
      pr: ${{ needs.build.outputs.pr }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true # default
      - name: AWS Test Resources
        env:
          AWS_REGION: us-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
          AZURE_REGION: westus2
          AZURE_SUBSCRIPTION_ID: ${{ secrets.CI_AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.CI_AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.CI_AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.CI_AZURE_CLIENT_SECRET }}
          CLUSTER_NAME: "${{ needs.build.outputs.clusterprefix }}"
        run: |
          make dev-aws-nuke
          make dev-azure-nuke
